1. (20 б.) На что следует обращать внимание при распараллеливании программ?
    В первую очередь нужно правильно организовать взаимодействие процессов/потоков, так, чтобы порядок моментов взаимодействия между разными потоками не нарушал целостности программы. В том числе, важно обеспечить корректную и последовательную работу с общим для разных потоков ресурсом, чтобы избежать утери или искажения данных. Например, перед тем, как один поток начал операцию с переменной, может быть необходимо чтобы другой поток завершил некоторую операцию с ней (в с++ для этого используется mutex и atomic). Так же при распараллеливании программы стоит оценивать насколько распараллеливание возможно и оправдано: может случиться, что несмотря на формальное использование нескольких потоков, фактически все операции происходят последоватльно и ускорение программы не достигается.

2. (20 б.) Что есть атомарная операция и атомарный тип данных?
    Атомарная операция - операция, выполнение которой не может быть разделено между разными процессами/потоками. То есть если два потока работают с одной переменной, они должны использовать только атомарные операции, иначе возможна ошибка.
    Атомарный тип - это тип, любые допустимые над ним операции атомарны. В С++ стандартные типы могут быть не атомарны с точки зрения стандартных операторов и функций (например, для int оператор + может быть выполнен в несколько атомарных операций), поэтому используется <atomic>, с помощью которого тип преобразуется в атомарный, для которого все определенные операции атомарны и при вызове в разных потоках будут работать корректно.
